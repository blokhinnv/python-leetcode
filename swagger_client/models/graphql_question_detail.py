# coding: utf-8

"""
    Simple Inventory API

    This is a simple API  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: pv.safronov@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GraphqlQuestionDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'stats': 'str',
        'code_definition': 'str',
        'sample_test_case': 'str',
        'enable_run_code': 'bool',
        'meta_data': 'str',
        'translated_content': 'str'
    }

    attribute_map = {
        'content': 'content',
        'stats': 'stats',
        'code_definition': 'codeDefinition',
        'sample_test_case': 'sampleTestCase',
        'enable_run_code': 'enableRunCode',
        'meta_data': 'metaData',
        'translated_content': 'translatedContent'
    }

    def __init__(self, content=None, stats=None, code_definition=None, sample_test_case=None, enable_run_code=None, meta_data=None, translated_content=None):  # noqa: E501
        """GraphqlQuestionDetail - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._stats = None
        self._code_definition = None
        self._sample_test_case = None
        self._enable_run_code = None
        self._meta_data = None
        self._translated_content = None
        self.discriminator = None
        self.content = content
        if stats is not None:
            self.stats = stats
        if code_definition is not None:
            self.code_definition = code_definition
        if sample_test_case is not None:
            self.sample_test_case = sample_test_case
        if enable_run_code is not None:
            self.enable_run_code = enable_run_code
        if meta_data is not None:
            self.meta_data = meta_data
        if translated_content is not None:
            self.translated_content = translated_content

    @property
    def content(self):
        """Gets the content of this GraphqlQuestionDetail.  # noqa: E501


        :return: The content of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GraphqlQuestionDetail.


        :param content: The content of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def stats(self):
        """Gets the stats of this GraphqlQuestionDetail.  # noqa: E501


        :return: The stats of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this GraphqlQuestionDetail.


        :param stats: The stats of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """

        self._stats = stats

    @property
    def code_definition(self):
        """Gets the code_definition of this GraphqlQuestionDetail.  # noqa: E501


        :return: The code_definition of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._code_definition

    @code_definition.setter
    def code_definition(self, code_definition):
        """Sets the code_definition of this GraphqlQuestionDetail.


        :param code_definition: The code_definition of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """

        self._code_definition = code_definition

    @property
    def sample_test_case(self):
        """Gets the sample_test_case of this GraphqlQuestionDetail.  # noqa: E501


        :return: The sample_test_case of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._sample_test_case

    @sample_test_case.setter
    def sample_test_case(self, sample_test_case):
        """Sets the sample_test_case of this GraphqlQuestionDetail.


        :param sample_test_case: The sample_test_case of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """

        self._sample_test_case = sample_test_case

    @property
    def enable_run_code(self):
        """Gets the enable_run_code of this GraphqlQuestionDetail.  # noqa: E501


        :return: The enable_run_code of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enable_run_code

    @enable_run_code.setter
    def enable_run_code(self, enable_run_code):
        """Sets the enable_run_code of this GraphqlQuestionDetail.


        :param enable_run_code: The enable_run_code of this GraphqlQuestionDetail.  # noqa: E501
        :type: bool
        """

        self._enable_run_code = enable_run_code

    @property
    def meta_data(self):
        """Gets the meta_data of this GraphqlQuestionDetail.  # noqa: E501


        :return: The meta_data of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this GraphqlQuestionDetail.


        :param meta_data: The meta_data of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """

        self._meta_data = meta_data

    @property
    def translated_content(self):
        """Gets the translated_content of this GraphqlQuestionDetail.  # noqa: E501


        :return: The translated_content of this GraphqlQuestionDetail.  # noqa: E501
        :rtype: str
        """
        return self._translated_content

    @translated_content.setter
    def translated_content(self, translated_content):
        """Sets the translated_content of this GraphqlQuestionDetail.


        :param translated_content: The translated_content of this GraphqlQuestionDetail.  # noqa: E501
        :type: str
        """

        self._translated_content = translated_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphqlQuestionDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphqlQuestionDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
