openapi: 3.0.0
info:
  description: Leetcode API implementation.
  version: 1.0.1-1
  title: Leetcode API
  contact:
    name: Pavel Safronov
    email: pv.safronov@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
components:
  securitySchemes:
    cookieSession:
      type: apiKey
      in: cookie
      name: LEETCODE_SESSION
    cookieCSRF:
      type: apiKey
      in: cookie
      name: csrftoken
    headerCSRF:
      type: apiKey
      in: header
      name: x-csrftoken
    referer:
      type: apiKey
      in: header
      name: Referer
  schemas:
    BaseSubmissionResult:
      required:
        - elapsed_time
        - lang
        - memory
        - pretty_lang
        - run_success
        - state
        - status_code
        - status_msg
        - status_runtime
        - submission_id
        - task_finish_time
      properties:
        code_output:
          example: ['stdout example', '']
          type: array
          items:
            type: string
        elapsed_time:
          example: 19
          type: integer
        full_runtime_error:
          example: 'SyntaxError: invalid syntax\n'
          type: string
        lang:
          example: 'python'
          type: string
        memory:
          example: 6996000
          type: integer
        memory_percentile:
          type: number
        pretty_lang:
          example: 'Python'
          type: string
        run_success:
          example: false
          type: boolean
        runtime_error:
          example: 'Line 5: SyntaxError: invalid syntax'
          type: string
        runtime_percentile:
          type: number
        state:
          enum: ['SUCCESS']
          type: string
        status_code:
          enum: [10, 11, 15]
          type: integer
        status_memory:
          example: '13.1 MB'
          type: string
        status_msg:
          example: 'Runtime Error'
          type: string
        status_runtime:
          example: '36 ms'
          type: string
        submission_id:
          example: 'runcode_1627219627.5662382_EI7iasnhLm'
          type: string
        task_finish_time:
          example: 1627219627690
          type: integer
        total_correct:
          type: integer
          example: 1
        total_testcases:
          type: integer
          example: 52
        question_id:
          example: 1
          type: integer
    TestSubmissionResult:
      allOf:
        - $ref: "#/components/schemas/BaseSubmissionResult"
        - type: object
          required:
            - code_answer
            - code_output
          properties:
            code_answer:
              example: ['[1]']
              type: array
              items:
                type: string
            correct_answer:
              type: boolean
            expected_status_code:
              enum: [10, 11, 15]
              type: integer
            expected_lang:
              example: 'python'
              type: string
            expected_run_success:
              type: boolean
            expected_status_runtime:
              example: "4"
              type: string
            expected_memory:
              example: 17
              type: integer
            expected_code_answer:
              example: ['[0,1]']
              type: array
              items:
                type: string
            expected_code_output:
              example: []
              type: array
              items:
                type: string
            expected_elapsed_time:
              example: 17
              type: integer
            expected_task_finish_time:
              example: 1627224209392
              type: integer
    SubmissionResult:
      allOf:
        - $ref: "#/components/schemas/BaseSubmissionResult"
        - type: object
          required:
            - question_id
            - compare_result
            - std_output
            - last_testcase
            - expected_output
            - total_correct
            - total_testcases
            - input_formatted
            - input
          properties:
            compare_result:
              example: "000000000000000000000000000000000000000000000000000000"
              type: string
            std_output:
              type: string
              example: "stdout example\n"
            last_testcase:
              type: string
              example: "[2,7,11,15]\n9"
            expected_output:
              type: string
              example: "[0,1]"
            input_formatted:
              type: string
              example: "[2,7,11,15], 9"
            input:
              type: string
              example: "[2,7,11,15]\n9"
    TestSubmission:
      required:
        - data_input
        - lang
        - question_id
        - test_mode
        - typed_code
      properties:
        data_input:
          type: string
        lang:
          example: 'python'
          type: string
        question_id:
          example: 1
          type: integer
        test_mode:
          enum: [false]  # TODO: not sure what `true` does
          type: boolean
        typed_code:
          example: 'print(1)'
          type: string
    Submission:
      required:
        - judge_type
        - lang
        - question_id
        - test_mode
        - typed_code
      properties:
        judge_type:
          enum: ['large']
          type: string
        lang:
          example: 'python'
          type: string
        question_id:
          example: 1
          type: integer
        test_mode:
          enum: [false]  # TODO: not sure what `true` does
          type: boolean
        typed_code:
          example: 'print(1)'
          type: string
    Interpretation:
      required:
        - interpret_id
        - test_case
      properties:
        interpret_id:
          type: string
        test_case:
          type: string
    SubmissionId:
      required:
        - submission_id
      properties:
        submission_id:
          type: integer
    Difficulty:
      required:
        - level
      properties:
        level:
          type: integer
    Stat:
      required:
        - question_id
        - question__title
        - question__title_slug
        - question__hide
        - total_acs
        - total_submitted
        - frontend_question_id
        - is_new_question
      properties:
        question_id:
          type: integer
        question__article__live:
          type: string
        question__article__slug:
          type: string
        question__article__has_video_solution:
          type: string
        question__title:
          type: string
        question__title_slug:
          type: string
        question__hide:
          type: boolean
        total_acs:
          type: integer
        total_submitted:
          type: integer
        frontend_question_id:
          type: integer
        is_new_question:
          type: boolean
    StatStatusPair:
      required:
        - stat
        - difficulty
        - paid_only
        - is_favor
        - frequency
        - progress
      properties:
        stat:
          $ref: '#/components/schemas/Stat'
        status:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        paid_only:
          type: boolean
        is_favor:
          type: boolean
        frequency:
          type: number
        progress:
          type: number
    Problems:
      required:
        - user_name
        - num_solved
        - num_total
        - ac_easy
        - ac_medium
        - ac_hard
        - stat_status_pairs
        - frequency_high
        - frequency_mid
        - category_slug
      properties:
        user_name:
          type: string
        num_solved:
          type: integer
        num_total:
          type: integer
        ac_easy:
          type: integer
        ac_medium:
          type: integer
        ac_hard:
          type: integer
        stat_status_pairs:
          type: array
          items:
            $ref: '#/components/schemas/StatStatusPair'
        frequency_high:
          type: integer
        frequency_mid:
          type: integer
        category_slug:
          type: string
    GraphqlQueryVariables:
      required:
        - titleSlug
      properties:
        titleSlug:
          type: string
          example: two-sum
    GraphqlQuestionDetail:
      required:
        - content  # Should always query for content. Otherwise swagger breaks
      properties:
        content:
          type: string
          example: '<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?'
        stats:
          type: string
          example: '{\"totalAccepted\": \"5M\", \"totalSubmission\": \"10.5M\", \"totalAcceptedRaw\": 4983120, \"totalSubmissionRaw\": 10461934, \"acRate\": \"47.6%\"}'
        codeDefinition:
          type: string
          example: '[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def twoSum(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar twoSum = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer[]}\\ndef two_sum(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func twoSum(nums []int, target int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun twoSum(nums: IntArray, target: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer[]\\n     */\\n    function twoSum($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function twoSum(nums: number[], target: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (two-sum nums target)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\\ntwo_sum(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\\n  def two_sum(nums, target) do\\n\\n  end\\nend\"}]'
        sampleTestCase:
          type: string
          example: '[2,7,11,15]\n9'
        enableRunCode:
          type: boolean
        metaData:
          type: string
          example: '{\n  \"name\": \"twoSum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\",\n    \"size\": 2\n  },\n  \"manual\": false\n}'
        translatedContent:
          type: string
    GraphqlQuestion:
      required:
        - question
      properties:
        question:
          $ref: '#/components/schemas/GraphqlQuestionDetail'
    GraphqlResponse:
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/GraphqlQuestion'
    GraphqlQuery:
      required:
        - query
        - variables
        - operationName
      properties:
        query:
          type: string
          example: >
            query getQuestionDetail($titleSlug: String!) {
              question(titleSlug: $titleSlug) {
                content
                stats
                codeDefinition
                sampleTestCase
                enableRunCode
                metaData
                translatedContent
              }
            }
            # isUserPremium: >
            #   {
            #     user {
            #       username
            #       isCurrentUserPremium
            #     }
            #   }
        variables:
          $ref: '#/components/schemas/GraphqlQueryVariables'
        operationName:
          enum: ['getQuestionDetail']
paths:
  /api/problems/{topic}/:
    get:
      parameters:
        - in: path
          name: topic
          required: true
          schema:
            enum: ['algorithms', 'database', 'shell', 'concurrency']
            type: string
      responses:
        '200':
          description: Returns problems by topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problems'
  /problems/{problem}/interpret_solution/:
    post:
      parameters:
        - in: path
          name: problem
          required: true
          schema:
            type: string
            example: two-sum
      requestBody:
        description: Solution to test
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSubmission'
      responses:
        '200':
          description: Returns problem test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interpretation'
  /submissions/detail/{id}/check/:
    get:
      parameters:
        - in: path
          name: id
          required: true
          description: Either submission id (int) or interpretation id (string)
          schema:
            oneOf:
              - type: string
              - type: integer
            example: two-sum
      responses:
        '200':
          description: Check status of the submitted solution
          content:
            application/json:
              schema:
                oneOf:  # Have to cast manually in the code. Now way to auto-detect type
                  - $ref: '#/components/schemas/SubmissionResult'
                  - $ref: '#/components/schemas/TestSubmissionResult'
  /problems/{problem}/submit/:
    post:
      parameters:
        - in: path
          name: problem
          required: true
          schema:
            type: string
            example: two-sum
      requestBody:
        description: Solution to test
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '200':
          description: Returns problem test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionId'
  /graphql:
    post:
      requestBody:
        description: GraphQL query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphqlQuery'
      responses:
        '200':
          description: Returns the result of graphql query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphqlResponse'

servers:
  - url: 'https://leetcode.com'
security:
  - cookieSession: []
    cookieCSRF: []
    headerCSRF: []
    referer: []
