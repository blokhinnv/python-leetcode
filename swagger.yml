openapi: 3.0.0
info:
  description: This is a simple API
  version: 1.0.0-oas3
  title: Simple Inventory API
  contact:
    email: pv.safronov@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
components:
  securitySchemes:
    cookieSession:
      type: apiKey
      in: cookie
      name: LEETCODE_SESSION
    cookieCSRF:
      type: apiKey
      in: cookie
      name: csrftoken
    headerCSRF:
      type: apiKey
      in: header
      name: x-csrftoken
    referer:
      type: apiKey
      in: header
      name: Referer
  schemas:
    BaseSubmissionResult:
      required:
        - elapsed_time
        - lang
        - memory
        - pretty_lang
        - run_success
        - state
        - status_code
        - status_msg
        - status_runtime
        - submission_id
        - task_finish_time
      properties:
        code_output:
          example: ['stdout example', '']
          type: array
          items:
            type: string
        elapsed_time:
          example: 19
          type: integer
        full_runtime_error:
          example: 'SyntaxError: invalid syntax\n'
          type: string
        lang:
          example: 'python'
          type: string
        memory:
          example: 6996000
          type: integer
        memory_percentile:
          type: number
        pretty_lang:
          example: 'Python'
          type: string
        run_success:
          example: false
          type: boolean
        runtime_error:
          example: 'Line 5: SyntaxError: invalid syntax'
          type: string
        runtime_percentile:
          type: number
        state:
          enum: ['SUCCESS']
          type: string
        status_code:
          enum: [10, 11, 15]
          type: integer
        status_memory:
          example: '13.1 MB'
          type: string
        status_msg:
          example: 'Runtime Error'
          type: string
        status_runtime:
          example: '36 ms'
          type: string
        submission_id:
          example: 'runcode_1627219627.5662382_EI7iasnhLm'
          type: string
        task_finish_time:
          example: 1627219627690
          type: integer
        total_correct:
          type: integer
          example: 1
        total_testcases:
          type: integer
          example: 52
        question_id:
          example: 1
          type: integer
    TestSubmissionResult:
      allOf:
        - $ref: "#/components/schemas/BaseSubmissionResult"
        - type: object
          required:
            - code_answer
            - code_output
          properties:
            code_answer:
              example: ['[1]']
              type: array
              items:
                type: string
            correct_answer:
              type: boolean
            expected_status_code:
              enum: [10, 11, 15]
              type: integer
            expected_lang:
              example: 'python'
              type: string
            expected_run_success:
              type: boolean
            expected_status_runtime:
              example: "4"
              type: string
            expected_memory:
              example: 17
              type: integer
            expected_code_answer:
              example: ['[0,1]']
              type: array
              items:
                type: string
            expected_code_output:
              example: []
              type: array
              items:
                type: string
            expected_elapsed_time:
              example: 17
              type: integer
            expected_task_finish_time:
              example: 1627224209392
              type: integer
    SubmissionResult:
      allOf:
        - $ref: "#/components/schemas/BaseSubmissionResult"
        - type: object
          required:
            - question_id
            - compare_result
            - std_output
            - last_testcase
            - expected_output
            - total_correct
            - total_testcases
            - input_formatted
            - input
          properties:
            compare_result:
              example: "000000000000000000000000000000000000000000000000000000"
              type: string
            std_output:
              type: string
              example: "stdout example\n"
            last_testcase:
              type: string
              example: "[2,7,11,15]\n9"
            expected_output:
              type: string
              example: "[0,1]"
            input_formatted:
              type: string
              example: "[2,7,11,15], 9"
            input:
              type: string
              example: "[2,7,11,15]\n9"
    TestSubmission:
      required:
        - data_input
        - lang
        - question_id
        - test_mode
        - typed_code
      properties:
        data_input:
          type: string
        lang:
          example: 'python'
          type: string
        question_id:
          example: 1
          type: integer
        test_mode:
          enum: [false]  # TODO: not sure what `true` does
          type: boolean
        typed_code:
          example: 'print(1)'
          type: string
    Submission:
      required:
        - judge_type
        - lang
        - question_id
        - test_mode
        - typed_code
      properties:
        judge_type:
          enum: ['large']
          type: string
        lang:
          example: 'python'
          type: string
        question_id:
          example: 1
          type: integer
        test_mode:
          enum: [false]  # TODO: not sure what `true` does
          type: boolean
        typed_code:
          example: 'print(1)'
          type: string
    Interpretation:
      required:
        - interpret_id
        - test_case
      properties:
        interpret_id:
          type: string
        test_case:
          type: string
    SubmissionId:
      required:
        - submission_id
      properties:
        submission_id:
          type: integer
    Difficulty:
      required:
        - level
      properties:
        level:
          type: integer
    Stat:
      required:
        - question_id
        - question__title
        - question__title_slug
        - question__hide
        - total_acs
        - total_submitted
        - frontend_question_id
        - is_new_question
      properties:
        question_id:
          type: integer
        question__article__live:
          type: string
        question__article__slug:
          type: string
        question__article__has_video_solution:
          type: string
        question__title:
          type: string
        question__title_slug:
          type: string
        question__hide:
          type: boolean
        total_acs:
          type: integer
        total_submitted:
          type: integer
        frontend_question_id:
          type: integer
        is_new_question:
          type: boolean
    StatStatusPair:
      required:
        - stat
        - difficulty
        - paid_only
        - is_favor
        - frequency
        - progress
      properties:
        stat:
          $ref: '#/components/schemas/Stat'
        status:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        paid_only:
          type: boolean
        is_favor:
          type: boolean
        frequency:
          type: number
        progress:
          type: number
    Problems:
      required:
        - user_name
        - num_solved
        - num_total
        - ac_easy
        - ac_medium
        - ac_hard
        - stat_status_pairs
        - frequency_high
        - frequency_mid
        - category_slug
      properties:
        user_name:
          type: string
        num_solved:
          type: integer
        num_total:
          type: integer
        ac_easy:
          type: integer
        ac_medium:
          type: integer
        ac_hard:
          type: integer
        stat_status_pairs:
          type: array
          items:
            $ref: '#/components/schemas/StatStatusPair'
        frequency_high:
          type: integer
        frequency_mid:
          type: integer
        category_slug:
          type: string
paths:
  /api/problems/{topic}/:
    get:
      parameters:
        - in: path
          name: topic
          required: true
          schema:
            enum: ['algorithms', 'database', 'shell', 'concurrency']
            type: string
      responses:
        '200':
          description: Returns problems by topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problems'
  /problems/{problem}/interpret_solution/:
    post:
      parameters:
        - in: path
          name: problem
          required: true
          schema:
            type: string
            example: two-sum
      requestBody:
        description: Solution to test
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSubmission'
      responses:
        '200':
          description: Returns problem test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interpretation'
  /submissions/detail/{id}/check/:
    get:
      parameters:
        - in: path
          name: id
          required: true
          description: Either submission id (int) or interpretation id (string)
          schema:
            oneOf:
              - type: string
              - type: integer
            example: two-sum
      responses:
        '200':
          description: Check status of the submitted solution
          content:
            application/json:
              schema:
                oneOf:  # Have to cast manually in the code. Now way to auto-detect type
                  - $ref: '#/components/schemas/SubmissionResult'
                  - $ref: '#/components/schemas/TestSubmissionResult'
  /problems/{problem}/submit/:
    post:
      parameters:
        - in: path
          name: problem
          required: true
          schema:
            type: string
            example: two-sum
      requestBody:
        description: Solution to test
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '200':
          description: Returns problem test result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionId'

servers:
  - url: 'https://leetcode.com'
security:
  - cookieSession: []
    cookieCSRF: []
    headerCSRF: []
    referer: []
